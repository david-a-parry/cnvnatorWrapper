# This file has been generated using:
#    make plugins-ios
# On Thu May  5 17:23:11 CEST 2011
# DON'T MAKE CHANGES AS THEY WILL GET LOST NEXT TIME THE FILE IS GENERATED
Plugin.ROOT@@Math@@DistSampler: Unuran TUnuranSampler Unuran "TUnuranSampler( )"
+Plugin.ROOT@@Math@@DistSampler: Foam TFoamSampler Foam "TFoamSampler( )"
Plugin.ROOT@@Math@@IRootFinderMethod: Brent ROOT::Math::Roots::Brent MathMore "Brent()"
+Plugin.ROOT@@Math@@IRootFinderMethod: Bisection ROOT::Math::Roots::Bisection MathMore "Bisection()"
+Plugin.ROOT@@Math@@IRootFinderMethod: FalsePos ROOT::Math::Roots::FalsePos MathMore "FalsePos()"
+Plugin.ROOT@@Math@@IRootFinderMethod: Newton ROOT::Math::Roots::Newton MathMore "Newton()"
+Plugin.ROOT@@Math@@IRootFinderMethod: Secant ROOT::Math::Roots::Secant MathMore "Secant()"
+Plugin.ROOT@@Math@@IRootFinderMethod: Steffenson ROOT::Math::Roots::Steffenson MathMore "Steffenson()"
Plugin.ROOT@@Math@@Minimizer: Minuit2 ROOT::Minuit2::Minuit2Minimizer Minuit2 "Minuit2Minimizer(const char *)"
+Plugin.ROOT@@Math@@Minimizer: Minuit TMinuitMinimizer Minuit "TMinuitMinimizer(const char *)"
+Plugin.ROOT@@Math@@Minimizer: GSLMultiMin ROOT::Math::GSLMinimizer MathMore "GSLMinimizer(const char *)"
+Plugin.ROOT@@Math@@Minimizer: GSLMultiFit ROOT::Math::GSLNLSMinimizer MathMore "GSLNLSMinimizer(int)"
+Plugin.ROOT@@Math@@Minimizer: GSLSimAn ROOT::Math::GSLSimAnMinimizer MathMore "GSLSimAnMinimizer(int)"
+Plugin.ROOT@@Math@@Minimizer: Linear TLinearMinimizer Minuit "TLinearMinimizer(const char *)"
+Plugin.ROOT@@Math@@Minimizer: Fumili TFumiliMinimizer Fumili "TFumiliMinimizer(int)"
+Plugin.ROOT@@Math@@Minimizer: Genetic ROOT::Math::GeneticMinimizer Genetic "GeneticMinimizer(int)"
Plugin.ROOT@@Math@@VirtualIntegrator: GSLIntegrator ROOT::Math::GSLIntegrator MathMore "GSLIntegrator(const char *, int, double, double, unsigned int)"
+Plugin.ROOT@@Math@@VirtualIntegrator: GSLMCIntegrator ROOT::Math::GSLMCIntegrator MathMore "GSLMCIntegrator(const char *, double, double, unsigned int)"
Plugin.TAFS: * TAFS AFSAuth "TAFS(const char*,const char*,Int_t)"
Plugin.TApplication: ^remote TApplicationRemote Net "TApplicationRemote(const char *,Int_t,const char *)"
+Plugin.TApplication: ^server TApplicationServer Net "TApplicationServer(Int_t *,char **,FILE *,const char*)"
Plugin.TArchiveFile: .+[.]zip$ TZIPFile Core "TZIPFile(const char*,const char*,TFile*)"
Plugin.TBrowserImp: TRootBrowser TRootBrowser Gui "NewBrowser(TBrowser *, const char *, UInt_t, UInt_t)"
+Plugin.TBrowserImp: TRootBrowserLite TRootBrowserLite Gui "NewBrowser(TBrowser *, const char *, UInt_t, UInt_t)"
Plugin.TChain: ^proof TProofChain Proof "TProofChain(TChain *, Bool_t)"
Plugin.TDataProgressDialog: * TDataProgressDialog PeacGui "TDataProgressDialog(TProof*,const char*,Int_t,Long64_t)"
Plugin.TDataSetManager: ^file TDataSetManagerFile Proof "TDataSetManagerFile(const char *,const char *,const char *)"
Plugin.TFile: ^http: TWebFile Net "TWebFile(const char*,Option_t*)"
+Plugin.TFile: ^rfio: TRFIOFile RFIO "TRFIOFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^castor: TCastorFile RCastor "TCastorFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^dcache: TDCacheFile DCache "TDCacheFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^dcap: TDCacheFile DCache "TDCacheFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^gsidcap: TDCacheFile DCache "TDCacheFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^gfal: TGFALFile GFAL "TGFALFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^chirp: TChirpFile Chirp "TChirpFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^alien: TAlienFile RAliEn "Open(const char*,Option_t*,const char*,Int_t,Bool_t)"
+Plugin.TFile: .+[.]xml$ TXMLFile XMLIO "TXMLFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^mysql: TSQLFile SQL "TSQLFile(const char*,Option_t*,const char*,const char*)"
+Plugin.TFile: ^oracle: TSQLFile SQL "TSQLFile(const char*,Option_t*,const char*,const char*)"
+Plugin.TFile: ^root: TXNetFile Netx "TXNetFile(const char*,Option_t*,const char*,Int_t,Int_t,Bool_t)"
+Plugin.TFile: ^hdfs: THDFSFile HDFS "THDFSFile(const char*,Option_t*,const char*,Int_t)"
+Plugin.TFile: ^rootd: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^rootup: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^roots: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^rootk: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^rootg: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^rooth: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
+Plugin.TFile: ^rootug: TNetFile Net "TNetFile(const char*,Option_t*,const char*,Int_t,Int_t)"
Plugin.TFileDrawMap: * TFileDrawMap TreePlayer "TFileDrawMap(const TFile*, const char*, const char*)"
Plugin.TFileStager: ^root: TXNetFileStager Netx "TXNetFileStager(const char *)"
+Plugin.TFileStager: ^rootd: TNetFileStager Net "TNetFileStager(const char *)"
+Plugin.TFileStager: ^rootup: TNetFileStager Net "TNetFileStager(const char *)"
+Plugin.TFileStager: ^roots: TNetFileStager Net "TNetFileStager(const char *)"
+Plugin.TFileStager: ^rootk: TNetFileStager Net "TNetFileStager(const char *)"
+Plugin.TFileStager: ^rootg: TNetFileStager Net "TNetFileStager(const char *)"
+Plugin.TFileStager: ^rooth: TNetFileStager Net "TNetFileStager(const char *)"
+Plugin.TFileStager: ^rootug: TNetFileStager Net "TNetFileStager(const char *)"
Plugin.TFitEditor: * TFitEditor FitPanel "GetInstance(TVirtualPad*, TObject*)"
Plugin.TGeoManagerEditor: * TGeoManagerEditor GeomBuilder "LoadLib()"
Plugin.TGLHistPainter: * TGLHistPainter RGL "TGLHistPainter(TH1*)"
Plugin.TGLManager: x11 TX11GLManager RGL "TX11GLManager()"
+Plugin.TGLManager: win32 TGWin32GLManager RGL "TGWin32GLManager()"
Plugin.TGPasswdDialog: * TGPasswdDialog Gui "TGPasswdDialog(const char*,char*,Int_t,UInt_t,UInt_t)"
Plugin.TGrid: ^glite TGLite RgLite "TGLite(const char*,const char*,const char*,const char*)"
Plugin.TGuiBuilder: * TRootGuiBuilder GuiBld "TRootGuiBuilder()"
Plugin.TGuiFactory: root TRootGuiFactory Gui "TRootGuiFactory()"
+Plugin.TGuiFactory: qt TQtRootGuiFactory QtRoot "TQtRootGuiFactory()"
Plugin.TImage: * TASImage ASImage "TASImage()"
Plugin.TImagePlugin: ps TASPluginGS ASPluginGS "TASPluginGS(const char*)"
+Plugin.TImagePlugin: eps TASPluginGS ASPluginGS "TASPluginGS(const char*)"
+Plugin.TImagePlugin: pdf TASPluginGS ASPluginGS "TASPluginGS(const char*)"
Plugin.TMinuitGraph: * TGraph Graf "TGraph(Int_t,const Double_t*,const Double_t*)"
Plugin.TPaletteEditor: * TASPaletteEditor ASImageGui "TASPaletteEditor(TAttImage*,UInt_t,UInt_t)"
Plugin.TProof: ^condor: TProofCondor Proof "TProofCondor(const char*,const char*,const char*,Int_t,const char*)"
+Plugin.TProof: ^sm: TProofSuperMaster Proof "TProofSuperMaster(const char*,const char*,const char*,Int_t,const char*)"
+Plugin.TProof: ^peac: TProofPEAC Peac "TProofPEAC(const char*,const char*,const char*,Int_t,const char*)"
+Plugin.TProof: * TProof Proof "TProof(const char*,const char*,const char*,Int_t,const char *)"
Plugin.TProofMgr: ^xpd TXProofMgr Proofx "TXProofMgr(const char *,Int_t,const char *)"
Plugin.TProofProgressDialog: * TProofProgressDialog SessionViewer "TProofProgressDialog(TProof*,const char*,Int_t,Long64_t,Long64_t)"
Plugin.TProofProgressLog: * TProofProgressLog SessionViewer "TProofProgressLog(const char*,Int_t,Long64_t,Long64_t)"
Plugin.TProofServ: ^xpd TXProofServ Proofx "TXProofServ(Int_t *,char **)"
Plugin.TSessionViewer: * TSessionViewer TreeViewer "TSessionViewer()"
Plugin.TSlave: ^xpd TXSlave Proofx "TXSlave(const char *,const char *,Int_t,const char *, TProof *,Int_t,const char *,const char *)"
Plugin.TSQLServer: ^mysql: TMySQLServer RMySQL "TMySQLServer(const char*,const char*,const char*)"
+Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL "TPgSQLServer(const char*,const char*,const char*)"
+Plugin.TSQLServer: ^sapdb: TSapDBServer SapDB "TSapDBServer(const char*,const char*,const char*)"
+Plugin.TSQLServer: ^oracle: TOracleServer Oracle "TOracleServer(const char*,const char*,const char*)"
+Plugin.TSQLServer: ^odbc: TODBCServer RODBC "TODBCServer(const char*,const char*,const char*)"
+Plugin.TSQLServer: ^odbcn: TODBCServer RODBC "TODBCServer(const char*,const char*,const char*)"
+Plugin.TSQLServer: ^odbcd: TODBCServer RODBC "TODBCServer(const char*,const char*,const char*)"
Plugin.TSystem: ^rfio: TRFIOSystem RFIO "TRFIOSystem()"
+Plugin.TSystem: ^castor: TRFIOSystem RFIO "TRFIOSystem()"
+Plugin.TSystem: ^dcache: TDCacheSystem DCache "TDCacheSystem()"
+Plugin.TSystem: ^dcap: TDCacheSystem DCache "TDCacheSystem()"
+Plugin.TSystem: ^gsidcap: TDCacheSystem DCache "TDCacheSystem()"
+Plugin.TSystem: ^alien: TAlienSystem RAliEn "TAlienSystem()"
+Plugin.TSystem: ^root: TXNetSystem Netx "TXNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^http: TWebSystem Net "TWebSystem()"
+Plugin.TSystem: ^hdfs: THDFSSystem HDFS "THDFSSystem()"
+Plugin.TSystem: ^rootd: TNetSystem Net "TNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^rootup: TNetSystem Net "TNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^roots: TNetSystem Net "TNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^rootk: TNetSystem Net "TNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^rootg: TNetSystem Net "TNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^rooth: TNetSystem Net "TNetSystem(const char *,Bool_t)"
+Plugin.TSystem: ^rootug: TNetSystem Net "TNetSystem(const char *,Bool_t)"
Plugin.TView: * TView3D Graf3d "TView3D(Int_t, const Double_t*, const Double_t*)"
Plugin.TViewerX3D: x11 TViewerX3D X3d "TViewerX3D(TVirtualPad*,Option_t*,const char*,UInt_t,UInt_t)"
+Plugin.TViewerX3D: qt TQtViewerX3D QtX3d "TQtViewerX3D(TVirtualPad*,Option_t*,const char*,UInt_t,UInt_t)"
Plugin.TVirtualAuth: Root TRootAuth RootAuth "TRootAuth()"
Plugin.TVirtualDragManager: * TGuiBldDragManager GuiBld "TGuiBldDragManager()"
Plugin.TVirtualFFT: fftwc2c TFFTComplex FFTW "TFFTComplex(Int_t, Int_t *,Bool_t)"
+Plugin.TVirtualFFT: fftwc2r TFFTComplexReal FFTW "TFFTComplexReal(Int_t,Int_t *, Bool_t)"
+Plugin.TVirtualFFT: fftwr2c TFFTRealComplex FFTW "TFFTRealComplex(Int_t,Int_t *, Bool_t)"
+Plugin.TVirtualFFT: fftwr2r TFFTReal FFTW "TFFTReal(Int_t, Int_t *,Bool_t)"
Plugin.TVirtualFitter: Minuit TFitter Minuit "TFitter(Int_t)"
+Plugin.TVirtualFitter: Fumili TFumili Fumili "TFumili(Int_t)"
+Plugin.TVirtualFitter: Minuit2 TFitterMinuit Minuit2 "TFitterMinuit(Int_t)"
+Plugin.TVirtualFitter: Fumili2 TFitterFumili Minuit2 "TFitterFumili(Int_t)"
Plugin.TVirtualGeoPainter: * TGeoPainter GeomPainter "TGeoPainter(TGeoManager*)"
Plugin.TVirtualGLImp: x11 TX11GL RGL "TX11GL()"
+Plugin.TVirtualGLImp: win32 TGWin32GL RGL "TGWin32GL()"
Plugin.TVirtualGraphPainter: * TGraphPainter GraphPainter "TGraphPainter()"
Plugin.TVirtualHistPainter: * THistPainter HistPainter "THistPainter()"
Plugin.TVirtualMonitoringWriter: MonaLisa TMonaLisaWriter MonaLisa "TMonaLisaWriter(const char *,const char *,const char *,const char *,const char *)"
+Plugin.TVirtualMonitoringWriter: SQL TSQLMonitoringWriter Net "TSQLMonitoringWriter(const char *,const char *,const char *,const char *)"
Plugin.TVirtualPad: * TPad Gpad "TPad()"
Plugin.TVirtualPadEditor: Ged TGedEditor Ged "TGedEditor(TCanvas*)"
Plugin.TVirtualPadPainter: gl TGLPadPainter RGL "TGLPadPainter()"
Plugin.TVirtualProofPlayer: base TProofPlayer ProofPlayer "TProofPlayer(TProof*)"
+Plugin.TVirtualProofPlayer: remote TProofPlayerRemote ProofPlayer "TProofPlayerRemote(TProof*)"
+Plugin.TVirtualProofPlayer: local TProofPlayerLocal ProofPlayer "TProofPlayerLocal(TProof*)"
+Plugin.TVirtualProofPlayer: slave TProofPlayerSlave ProofPlayer "TProofPlayerSlave(TSocket*)"
+Plugin.TVirtualProofPlayer: sm TProofPlayerSuperMaster ProofPlayer "TProofPlayerSuperMaster(TProof*)"
+Plugin.TVirtualProofPlayer: lite TProofPlayerLite ProofPlayer "TProofPlayerLite(TProof*)"
Plugin.TVirtualPS: ps TPostScript Postscript "TPostScript()"
+Plugin.TVirtualPS: svg TSVG Postscript "TSVG()"
+Plugin.TVirtualPS: pdf TPDF Postscript "TPDF()"
+Plugin.TVirtualPS: image TImageDump Postscript "TImageDump()"
Plugin.TVirtualStreamerInfo: * TStreamerInfo RIO "TStreamerInfo()"
Plugin.TVirtualTreePlayer: * TTreePlayer TreePlayer "TTreePlayer()"
Plugin.TVirtualTreeViewer: * TTreeViewer TreeViewer "TTreeViewer(const TTree*)"
Plugin.TVirtualViewer3D: x3d TViewerX3D X3d "TViewerX3D(TVirtualPad*)"
+Plugin.TVirtualViewer3D: ogl TGLSAViewer RGL "TGLSAViewer(TVirtualPad*)"
+Plugin.TVirtualViewer3D: gl TGLViewer RGL "TGLViewer(TVirtualPad*)"
Plugin.TVirtualX: x11 TGX11 GX11 "TGX11(const char*,const char*)"
+Plugin.TVirtualX: x11ttf TGX11TTF GX11TTF "TGX11TTF()"
+Plugin.TVirtualX: win32 TGWin32 Win32 "TGWin32(const char*,const char*)"
+Plugin.TVirtualX: win32gdk TGWin32 Win32gdk "TGWin32(const char*,const char*)"
+Plugin.TVirtualX: qt TGQt GQt "TGQt(const char*,const char*)"
