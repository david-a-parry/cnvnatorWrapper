<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
]>
<article>
<articleinfo>
  <author><firstname>Anar</firstname><surname>Manafov</surname></author>
  <authorinitials>am</authorinitials>
  <!--artpagenums></artpagenums>
  <volumenum></volumenum>
  <issuenum></issuenum>
  <publisher><publishername></publishername></publisher!-->
  <pubdate>2010</pubdate>
  <title>New TMemStat: Technical Overview</title>
  <titleabbrev></titleabbrev>
  <!--revhistory>
     <revision>
        <revnumber>0.1</revnumber>
        <date>2010-03-19</date>
        <revremark>First draft for review.</revremark>
     </revision>
  </revhistory-->
</articleinfo>

<sect1 id="Obtaining_a_backtrace"><title>Obtaining a backtrace</title>
<para>
In the current implementation of TMemStat we have implemented 2 algorithms to unwind the stack after a malloc/free hook is called:
<orderedlist>
<title> </title>
  <listitem id="first">
    <para>
    <ulink url="http://www.gnu.org/s/libc/manual/html_node/Backtraces.html">backtrace</ulink> - a function of the GNU C Library,
    </para>
  </listitem>
  <listitem>
    <para>
    <ulink url="http://gcc.gnu.org/onlinedocs/gcc/Return-Address.html">__builtin_frame_address</ulink> - a built-in function of gcc.
    </para>
  </listitem>
</orderedlist>

User can switch between algorithms by providing an option to TMemStat constructor. When user sets “gnubuiltin” as an option, than gcc builtin will be used, if user provides anything else or an empty string, than C Library backtrace will be used.
</para>
<para>
Each algorithm has its own advantages and disadvantages. Up to now we know, that C Library backtrace is very slow, but woks in most of the cases. Gcc builtin doesn't always work when application is compiled in optimized mode and frame pointers are omitted. Actually both algorithms could have problems if frame pointers are omitted (compiler optimization option).
</para>
</sect1>

<sect1 id="Algorithms_Comparison"><title>Algorithms Comparison</title>
<sect2 id="General_check"><title>General check</title>
<para>
The following systems were used for tests.
</para>
<para>
<literallayout>
<emphasis role="bold">Linux 64bit:</emphasis>
Linux  2.6.18-164.11.1.el5 #1 SMP Wed Jan 20 12:36:24 CET 2010 x86_64 x86_64 x86_64 GNU/Linux
gcc version 4.1.2 20080704 (Red Hat 4.1.2-46)
</literallayout>
</para>

<para>
<literallayout>
<emphasis role="bold">Linux 32bit:</emphasis>
</literallayout>
</para>

<para>
<literallayout>
<emphasis role="bold">MacOSX 10.5:</emphasis>
</literallayout>
</para>

<para>
<literallayout>
<emphasis role="bold">MacOSX 10.6:</emphasis>
Darwin 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov  3 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386
gcc version 4.2.1 (Apple Inc. build 5646) (dot 1)
</literallayout>
</para>
  <table>
     <title>General comparison</title>
     <tgroup cols="9">
        <thead>
           <row>
              <entry>algorithm / OS</entry>
              <entry>Linix 64b (opt.<footnote id="opt"><para><emphasis role="bold">opt.</emphasis> means that TMemStat compiled with the default ROOT optimization flags and the same valid for a test script.
</para></footnote>)</entry>
            <entry>Linux 64b (debug<footnote id="debug"><para><emphasis role="bold">debug</emphasis> means that TMemStat library is compiled with “make ROOTBUILD=debug” and a test script compiled by ACLIC with C++g option.
</para></footnote>)</entry>
              <entry>Linux 32b (opt.<footnoteref linkend="opt" />)</entry>  
            <entry>Linux 32b (debug <footnoteref linkend="debug" />)</entry>
              <entry>MacOSX 10.5 (opt<footnoteref linkend="opt" />)</entry>  
              <entry>MacOSX 10.5 (debug<footnoteref linkend="debug" />)</entry>  
            <entry>MacOSX 10.6 (opt.<footnoteref linkend="opt" />)</entry>
              <entry>MacOSX 10.6 (debug<footnoteref linkend="debug" />)</entry>  
       </row>
          </thead>
          <tbody>
            <row>
              <entry>backtrace</entry>
                 <entry>Ok.</entry>    
              <entry>Ok.</entry>
              <entry>-</entry>
                 <entry>-</entry>    
              <entry>-</entry>
              <entry>-</entry>
                 <entry>Ok. <footnote id="mac_optim">
  <para>
Works, but if the malloc/free is called in a loop, than we get two unique backtraces for each loop. Probably there is a partial optimization, and compiler unrolls the first iteration outside of the loop. This is why we actually get two calls for malloc/free, one before the loop and another is in the loop. I checked, that it doesn’t matter how many iteration we do, 10 or 100000. We always get two different back traces.
Sometimes we even can get full loop unroll, which means we get as many return address as iterations in the loop.
Both algorithms beehives the same in this case.
What else we could expect, if the code was really optimized and compiler unrolled the loop...
</para>
</footnote>
</entry>    
              <entry>Ok.</entry>
            </row>
            <row>
              <entry>builtin</entry>
                 <entry>X</entry>    
              <entry>Ok.</entry>
              <entry>-</entry>
                 <entry>-</entry>    
              <entry>-</entry>
              <entry>-</entry>
                 <entry>Ok. <footnoteref linkend="mac_optim"/></entry>    
              <entry>Ok.</entry>
            </row>   
        </tbody>
      </tgroup>
  </table>

</sect2>

<sect2 id="speed_check"><title>Speed check</title>
<para>
</para>
</sect2>

</sect1>

<sect1 id="usage_tips"><title>Usage tips</title>
<para>
Starting from gcc 4.1, some optimization levels (e.g., -O, -Os, -O2) imply by the default the -fomit-frame-pointer flag. This flagprevents our “gcc builtin” algorithm to work properly. It you want memstat to use this algorithm and your application is comoled with optimization flags, we recommend to also use build your application with <emphasis role="bold">-fno-omit-frame-pointer</emphasis> option.
</para>
</sect1>

</article>

